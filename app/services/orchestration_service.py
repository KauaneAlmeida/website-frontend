"""
Intelligent Orchestration Service - VERS√ÉO COMPLETAMENTE CORRIGIDA PARA PLACEHOLDERS

PRINCIPAIS CORRE√á√ïES:
1. Mapeamento correto de campos Firebase para placeholders
2. Processamento robusto de placeholders com fallbacks m√∫ltiplos
3. Sincroniza√ß√£o melhorada de dados entre Firebase e sess√£o
4. Valida√ß√£o e logs detalhados para debug
5. Fallback manual para casos cr√≠ticos
"""

import logging
import re
import uuid
from typing import Dict, Any, Optional
from datetime import datetime, timedelta

from app.services.firebase_service import (
    get_conversation_flow,
    save_user_session,
    get_user_session,
    save_lead_data,
    get_firebase_service_status,
    render_question,
    create_context_from_session_data,
    force_update_identification
)
from app.services.ai_chain import ai_orchestrator
from app.services.baileys_service import baileys_service
from app.services.lawyer_notification_service import lawyer_notification_service

logger = logging.getLogger(__name__)


class IntelligentHybridOrchestrator:
    """
    Orchestrador unificado com processamento robusto de placeholders.
    TOTALMENTE CORRIGIDO para problemas de substitui√ß√£o de placeholders.
    """

    def __init__(self):
        self.gemini_unavailable_until = None
        self.gemini_check_interval = timedelta(minutes=5)
        self.flow_cache = None
        self.flow_cache_timestamp = None
        self.flow_cache_ttl = timedelta(minutes=10)

    async def process_message(
        self,
        message: str,
        session_id: str,
        phone_number: str = None,
        platform: str = "web"
    ) -> Dict[str, Any]:
        """
        Ponto de entrada principal com tratamento robusto de erros.
        """
        try:
            logger.info(f"üéØ IN√çCIO - Processing message | platform={platform} | session={session_id} | msg='{message[:50]}...'")

            if not message or not message.strip():
                logger.warning("‚ö†Ô∏è Mensagem vazia recebida")
                return {
                    "response": "Por favor, digite uma mensagem v√°lida.",
                    "response_type": "validation_error",
                    "session_id": session_id,
                    "error": "empty_message"
                }

            # Get or create session
            session_data = await self._get_or_create_session(session_id, platform, phone_number)
            logger.info(f"üìä Sess√£o: step={session_data.get('current_step')} | flow_completed={session_data.get('flow_completed')} | collecting_phone={session_data.get('collecting_phone')}")
            
            # Check if collecting phone number
            if session_data.get("collecting_phone"):
                return await self._handle_phone_collection(message, session_id, session_data)
            
            # Check if flow is completed and should use AI
            if session_data.get("flow_completed") and session_data.get("phone_collected"):
                return await self._handle_ai_conversation(message, session_id, session_data)
            
            # Handle structured flow progression
            return await self._handle_structured_flow(message, session_id, session_data, platform)

        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO na orquestra√ß√£o | session={session_id}: {str(e)}")
            import traceback
            logger.error(f"üîç Full traceback: {traceback.format_exc()}")
            
            return {
                "response": "Desculpe, ocorreu um erro. Vamos come√ßar novamente - qual √© o seu nome completo?",
                "response_type": "error_fallback",
                "session_id": session_id,
                "current_step": 1,
                "flow_completed": False,
                "error": str(e)
            }

    def _process_placeholders_in_text(self, text: str, session_data: Dict[str, Any]) -> str:
        """
        CORRE√á√ÉO DEFINITIVA - Processamento baseado na documenta√ß√£o fornecida
        """
        try:
            if not text or "{" not in text:
                return text
            
            logger.info("="*60)
            logger.info("üîß RENDER_FIXED - PROCESSAMENTO DE PLACEHOLDERS")
            logger.info(f"üìù Template original: '{text}'")
            
            # Extrair lead_data
            lead_data = session_data.get("lead_data", {})
            logger.info(f"üìä Lead data dispon√≠vel: {lead_data}")
            
            # MAPEAMENTO COMPLETO baseado na documenta√ß√£o
            placeholder_map = {}
            
            # 1. NOME/IDENTIFICA√á√ÉO - m√∫ltiplas fontes e aliases
            identification = (
                lead_data.get("identification") or 
                lead_data.get("name") or 
                lead_data.get("user_name") or
                session_data.get("last_user_message", "") or
                ""
            ).strip()
            
            if identification:
                name_aliases = [
                    "{user_name}", "{user name}", "{name}", "{identification}",
                    "{Name}", "{USER_NAME}", "{ username }", "{ user_name }",
                    "{ name }", "{nome}", "{usuario}", "{cliente}"
                ]
                for alias in name_aliases:
                    placeholder_map[alias] = identification
                logger.info(f"‚úÖ FIXED: Nome '{identification}' mapeado para {len(name_aliases)} aliases")
            
            # 2. CONTATO - m√∫ltiplos aliases
            contact_info = (
                lead_data.get("contact_info") or 
                lead_data.get("contact") or 
                lead_data.get("phone") or
                session_data.get("phone_number", "") or
                ""
            ).strip()
            
            if contact_info:
                contact_aliases = [
                    "{contact_info}", "{contact}", "{phone}", "{telefone}",
                    "{contato}", "{whatsapp}"
                ]
                for alias in contact_aliases:
                    placeholder_map[alias] = contact_info
                logger.info(f"‚úÖ FIXED: Contato '{contact_info}' mapeado")
            
            # 3. √ÅREA DO DIREITO - m√∫ltiplos aliases
            area_qualification = (
                lead_data.get("area_qualification") or 
                lead_data.get("area") or 
                lead_data.get("area_of_law") or
                ""
            ).strip()
            
            if area_qualification:
                area_aliases = [
                    "{area}", "{area_of_law}", "{area_qualification}",
                    "{area_direito}", "{especialidade}"
                ]
                for alias in area_aliases:
                    placeholder_map[alias] = area_qualification
                logger.info(f"‚úÖ FIXED: √Årea '{area_qualification}' mapeada")
            
            # 4. SITUA√á√ÉO/PROBLEMA - m√∫ltiplos aliases
            problem_description = (
                lead_data.get("problem_description") or 
                lead_data.get("situation") or 
                lead_data.get("case_details") or
                ""
            ).strip()
            
            if problem_description:
                situation_aliases = [
                    "{situation}", "{case_details}", "{problem_description}",
                    "{situacao}", "{problema}", "{caso}"
                ]
                for alias in situation_aliases:
                    placeholder_map[alias] = problem_description
                logger.info(f"‚úÖ FIXED: Situa√ß√£o mapeada")
            
            logger.info(f"üîß PLACEHOLDER_MAP completo criado: {len(placeholder_map)} mapeamentos")
            
            # APLICAR SUBSTITUI√á√ïES
            processed_text = text
            substitutions_made = []
            
            for placeholder, value in placeholder_map.items():
                if placeholder in processed_text:
                    processed_text = processed_text.replace(placeholder, value)
                    substitutions_made.append(f"'{placeholder}' ‚Üí '{value}'")
                    logger.info(f"‚úÖ FIXED: Substitu√≠do '{placeholder}' por '{value}'")
            
            # LIMPEZA FINAL de placeholders n√£o substitu√≠dos
            remaining_placeholders = re.findall(r'\{[^}]+\}', processed_text)
            if remaining_placeholders:
                logger.warning(f"‚ö†Ô∏è FIXED: Removendo placeholders n√£o utilizados: {remaining_placeholders}")
                for unused_placeholder in remaining_placeholders:
                    # Se for relacionado a nome e temos identifica√ß√£o, usar ela
                    if any(word in unused_placeholder.lower() for word in ["name", "user", "nome", "usuario"]) and identification:
                        processed_text = processed_text.replace(unused_placeholder, identification)
                        logger.info(f"üîß FIXED: Fallback '{unused_placeholder}' ‚Üí '{identification}'")
                    else:
                        processed_text = processed_text.replace(unused_placeholder, "")
                        logger.info(f"üßπ FIXED: Removido '{unused_placeholder}'")
            
            # FORMATA√á√ÉO FINAL
            processed_text = processed_text.replace("\\n", "\n")
            processed_text = re.sub(r'\n\s*\n', '\n\n', processed_text)
            processed_text = re.sub(r'[ \t]+', ' ', processed_text)
            processed_text = processed_text.strip()
            
            logger.info(f"üîß FIXED RESULT: '{processed_text[:100]}...' | substitui√ß√µes: {len(substitutions_made)}")
            logger.info("="*60)
            
            return processed_text
            
        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO no processamento: {str(e)}")
            import traceback
            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            
            # FALLBACK DE EMERG√äNCIA
            try:
                emergency_name = (
                    session_data.get("lead_data", {}).get("identification") or
                    session_data.get("last_user_message", "") or
                    "usu√°rio"
                ).strip()
                
                emergency_text = text
                emergency_patterns = [
                    "{user name}", "{user_name}", "{name}", "{Name}",
                    "{ username }", "{ user_name }", "{ name }"
                ]
                
                for pattern in emergency_patterns:
                    emergency_text = emergency_text.replace(pattern, emergency_name)
                
                # Remover outros placeholders
                emergency_text = re.sub(r'\{[^}]+\}', '', emergency_text)
                
                logger.info(f"üö® FALLBACK DE EMERG√äNCIA: '{emergency_name}'")
                return emergency_text
                
            except Exception as final_error:
                logger.error(f"‚ùå FALHA TOTAL: {final_error}")
                return text or "Como posso ajud√°-lo?"

    async def _get_flow_with_cache(self) -> Dict[str, Any]:
        """
        Obter fluxo do Firebase com cache e fallback.
        """
        try:
            # Verificar cache
            if (self.flow_cache and self.flow_cache_timestamp and 
                datetime.now() - self.flow_cache_timestamp < self.flow_cache_ttl):
                logger.info("üìö Usando fluxo do cache")
                return self.flow_cache
            
            # Buscar do Firebase
            try:
                logger.info("üî• Buscando fluxo do Firebase...")
                firebase_flow = await get_conversation_flow()
                
                if firebase_flow and firebase_flow.get("steps") and len(firebase_flow["steps"]) >= 3:
                    logger.info(f"‚úÖ Fluxo Firebase carregado com {len(firebase_flow['steps'])} steps")
                    self.flow_cache = firebase_flow
                    self.flow_cache_timestamp = datetime.now()
                    return firebase_flow
                else:
                    logger.warning("‚ö†Ô∏è Fluxo Firebase inv√°lido - usando fallback")
                    raise Exception("Invalid Firebase flow")
                    
            except Exception as firebase_error:
                logger.warning(f"‚ö†Ô∏è Erro Firebase: {str(firebase_error)} - usando fluxo hardcoded")
                
            # Fallback para fluxo hardcoded
            hardcoded_flow = self._get_hardcoded_flow()
            logger.info("üîß Usando fluxo hardcoded como fallback")
            return hardcoded_flow
            
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico ao obter fluxo: {str(e)}")
            return self._get_hardcoded_flow()

    async def _get_or_create_session(
        self,
        session_id: str,
        platform: str,
        phone_number: str = None
    ) -> Dict[str, Any]:
        """
        Obter sess√£o existente ou criar nova com melhor sincroniza√ß√£o.
        """
        try:
            logger.info(f"üîç Buscando/criando sess√£o: {session_id}")
            
            session_data = await get_user_session(session_id)
            
            if not session_data:
                logger.info(f"üÜï Criando nova sess√£o para {session_id}")
                session_data = {
                    "session_id": session_id,
                    "platform": platform,
                    "current_step": 1,
                    "flow_completed": False,
                    "collecting_phone": False,
                    "phone_collected": False,
                    "ai_mode": False,
                    "lead_data": {},
                    "message_count": 0,
                    "created_at": datetime.now(),
                    "last_updated": datetime.now(),
                    "flow_source": "firebase"
                }
                
                if phone_number:
                    session_data["phone_number"] = phone_number
                
                await self._persist_session_safely(session_id, session_data)
                logger.info(f"‚úÖ Nova sess√£o criada: {session_id}")
            else:
                logger.info(f"üìã Sess√£o existente: {session_id} | step={session_data.get('current_step')}")
            
            # Atualizar contador de mensagens
            session_data["message_count"] = session_data.get("message_count", 0) + 1
            session_data["last_updated"] = datetime.now()
            
            return session_data
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar/criar sess√£o: {str(e)}")
            # Sess√£o padr√£o se Firebase falhar
            return {
                "session_id": session_id,
                "platform": platform,
                "current_step": 1,
                "flow_completed": False,
                "collecting_phone": False,
                "phone_collected": False,
                "ai_mode": False,
                "lead_data": {},
                "message_count": 1,
                "created_at": datetime.now(),
                "last_updated": datetime.now(),
                "flow_source": "fallback"
            }

    async def _persist_session_safely(self, session_id: str, session_data: Dict[str, Any]):
        """
        Persistir sess√£o com retry e melhor tratamento de erros.
        """
        max_retries = 3
        for attempt in range(max_retries):
            try:
                await save_user_session(session_id, session_data)
                logger.info(f"‚úÖ Sess√£o persistida (tentativa {attempt + 1})")
                return
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao salvar sess√£o (tentativa {attempt + 1}/{max_retries}): {str(e)}")
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå Falha definitiva ao persistir sess√£o: {str(e)}")
                    raise

    def _is_initialization_message(self, message: str, current_step: int) -> bool:
        """
        Detectar mensagens de inicializa√ß√£o.
        """
        if current_step != 1:
            return False
        
        message_lower = message.lower().strip()
        init_messages = [
            "ol√°", "oi", "hello", "hi", "hey", "ola", "oii", 
            "start", "come√ßar", "iniciar", "start_conversation",
            "bom dia", "boa tarde", "boa noite", "opa", "e ai", "eai"
        ]
        
        return (len(message.strip()) <= 10 and message_lower in init_messages) or message_lower in init_messages

    async def _handle_structured_flow(
        self,
        message: str,
        session_id: str,
        session_data: Dict[str, Any],
        platform: str
    ) -> Dict[str, Any]:
        """
        üîß REESCRITO - Fluxo estruturado com melhor sincroniza√ß√£o de dados.
        """
        try:
            flow = await self._get_flow_with_cache()
            current_step = session_data.get("current_step", 1)
            
            logger.info(f"üìã Fluxo estruturado | step={current_step} | msg='{message[:30]}...'")
            
            # Encontrar step atual
            current_step_data = None
            for step in flow.get("steps", []):
                if step.get("id") == current_step:
                    current_step_data = step
                    break
            
            if not current_step_data:
                logger.error(f"‚ùå Step {current_step} n√£o encontrado - completando fluxo")
                return await self._complete_flow_and_collect_phone(session_id, session_data, flow)
            
            # Verificar se √© mensagem de inicializa√ß√£o
            is_init_message = self._is_initialization_message(message, current_step)
            
            if is_init_message:
                logger.info("üöÄ Mensagem de inicializa√ß√£o - retornando pergunta inicial")
                question_with_placeholders = self._process_placeholders_in_text(
                    current_step_data["question"], 
                    session_data
                )
                
                return {
                    "response": question_with_placeholders,
                    "response_type": "structured_question",
                    "session_id": session_id,
                    "current_step": current_step,
                    "flow_completed": False,
                    "ai_mode": False
                }
            
            # Obter nome do campo
            field_name = current_step_data.get("field", f"step_{current_step}")
            
            # Verificar se j√° respondeu
            if field_name in session_data.get("lead_data", {}):
                logger.info(f"‚ö†Ô∏è Step {current_step} j√° respondido, avan√ßando")
                return await self._advance_to_next_step(session_id, session_data, flow, current_step)
            
            # Validar resposta
            if not self._validate_answer(message, current_step, current_step_data):
                logger.warning(f"‚ùå Resposta inv√°lida para step {current_step}")
                error_message = current_step_data.get("error_message", "Por favor, forne√ßa uma resposta mais completa.")
                validation_question = self._process_placeholders_in_text(
                    current_step_data["question"], 
                    session_data
                )
                
                return {
                    "response": f"{error_message} {validation_question}",
                    "response_type": "validation_error",
                    "session_id": session_id,
                    "current_step": current_step,
                    "flow_completed": False,
                    "ai_mode": False
                }
            
            # üîß SALVAR RESPOSTA COM MAPEAMENTO CORRETO
            logger.info(f"üíæ Salvando resposta para step {current_step} no campo '{field_name}': '{message}'")
            
            if "lead_data" not in session_data:
                session_data["lead_data"] = {}
            
            # SALVAR NO CAMPO PRIM√ÅRIO
            session_data["lead_data"][field_name] = message.strip()
            session_data["last_user_message"] = message.strip()
            
            # üîß CR√çTICO: Criar aliases para compatibilidade baseado na documenta√ß√£o
            if field_name == "identification":
                # Nome tem m√∫ltiplos aliases
                name_value = message.strip().title()
                session_data["lead_data"]["identification"] = name_value
                session_data["lead_data"]["name"] = name_value
                session_data["lead_data"]["user_name"] = name_value
                logger.info(f"‚úÖ FIXED: Nome salvo com aliases: identification='{name_value}'")
                
            elif field_name == "area_qualification":
                # √Årea do direito com aliases
                area_value = message.strip()
                session_data["lead_data"]["area_qualification"] = area_value
                session_data["lead_data"]["area"] = area_value
                session_data["lead_data"]["area_of_law"] = area_value
                logger.info(f"‚úÖ FIXED: √Årea salva com aliases: area='{area_value}'")
                
            elif field_name == "contact_info":
                # Contato com aliases
                contact_value = message.strip()
                session_data["lead_data"]["contact_info"] = contact_value
                session_data["lead_data"]["contact"] = contact_value
                logger.info(f"‚úÖ FIXED: Contato salvo com aliases")
                
            elif field_name == "problem_description":
                # Situa√ß√£o com aliases
                situation_value = message.strip()
                session_data["lead_data"]["problem_description"] = situation_value
                session_data["lead_data"]["situation"] = situation_value
                session_data["lead_data"]["case_details"] = situation_value
                logger.info(f"‚úÖ FIXED: Situa√ß√£o salva com aliases")
            
            # üîß PERSISTIR IMEDIATAMENTE ANTES DE AVAN√áAR
            session_data["last_updated"] = datetime.now()
            await self._persist_session_safely(session_id, session_data)
            
            # üîß AGUARDAR SINCRONIZA√á√ÉO
            import asyncio
            await asyncio.sleep(0.2)
            
            # üîß RECARREGAR DADOS DO FIREBASE para garantir sincroniza√ß√£o
            try:
                fresh_session_data = await get_user_session(session_id)
                if fresh_session_data and fresh_session_data.get("lead_data"):
                    session_data = fresh_session_data
                    logger.info(f"üîÑ Dados recarregados: {list(session_data['lead_data'].keys())}")
            except Exception as reload_error:
                logger.error(f"‚ùå Erro ao recarregar: {reload_error}")
            
            # Avan√ßar para pr√≥ximo step
            return await self._advance_to_next_step(session_id, session_data, flow, current_step)
                
        except Exception as e:
            logger.error(f"‚ùå Erro no fluxo estruturado: {str(e)}")
            import traceback
            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            
            # Fallback robusto
            return {
                "response": "Qual √© o seu nome completo?",
                "response_type": "error_fallback",
                "session_id": session_id,
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False
            }

    async def _advance_to_next_step(
        self,
        session_id: str,
        session_data: Dict[str, Any],
        flow: Dict[str, Any],
        current_step: int
    ) -> Dict[str, Any]:
        """
        üîß REESCRITO - Avan√ßo com melhor sincroniza√ß√£o e processamento de placeholders.
        """
        try:
            next_step = current_step + 1
            logger.info(f"‚û°Ô∏è Avan√ßando de step {current_step} para {next_step}")
            
            # Encontrar pr√≥ximo step
            next_step_data = None
            for step in flow.get("steps", []):
                if step.get("id") == next_step:
                    next_step_data = step
                    break
            
            if next_step_data:
                # üîß ATUALIZAR E PERSISTIR ANTES DE PROCESSAR PLACEHOLDERS
                session_data["current_step"] = next_step
                session_data["last_updated"] = datetime.now()
                await self._persist_session_safely(session_id, session_data)
                
                # üîß AGUARDAR SINCRONIZA√á√ÉO
                import asyncio
                await asyncio.sleep(0.3)
                
                # üîß RECARREGAR DADOS ATUALIZADOS
                try:
                    fresh_session_data = await get_user_session(session_id)
                    if fresh_session_data:
                        session_data = fresh_session_data
                        logger.info(f"üîÑ Dados frescos carregados para processamento de placeholders")
                except Exception:
                    logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel recarregar - usando dados em mem√≥ria")
                
                # üîß PROCESSAR PLACEHOLDERS COM DADOS ATUALIZADOS
                next_question_with_placeholders = self._process_placeholders_in_text(
                    next_step_data["question"], 
                    session_data
                )
                
                return {
                    "response": next_question_with_placeholders,
                    "response_type": "structured_question",
                    "session_id": session_id,
                    "current_step": next_step,
                    "flow_completed": False,
                    "ai_mode": False
                }
            else:
                # Fluxo completo
                logger.info("üèÅ Fluxo estruturado completo")
                return await self._complete_flow_and_collect_phone(session_id, session_data, flow)
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao avan√ßar step: {str(e)}")
            return {
                "response": "Qual o melhor telefone/WhatsApp para contato?",
                "response_type": "advance_error_fallback",
                "session_id": session_id,
                "current_step": current_step + 1,
                "flow_completed": False,
                "ai_mode": False
            }

    def _get_hardcoded_flow(self) -> Dict[str, Any]:
        """
        Fluxo hardcoded como fallback.
        """
        return {
            "steps": [
                {
                    "id": 1,
                    "question": "üëã Ol√°! Seja bem-vindo ao m.lima. Estou aqui para entender seu caso e agilizar o contato com um de nossos advogados especializados.\n\nPara come√ßar, qual √© o seu nome completo?",
                    "field": "identification",
                    "context": "",
                    "error_message": "Por favor, informe seu nome completo para que possamos te atender adequadamente.",
                    "validation": {
                        "required": True,
                        "min_length": 2
                    }
                },
                {
                    "id": 2,
                    "question": "Prazer em conhec√™-lo, {username}!\n\nüì± Qual o melhor telefone/WhatsApp para contato?\n\nüìß Voc√™ poderia informar seu e-mail tamb√©m?",
                    "field": "contact_info",
                    "context": "contact_collection",
                    "error_message": "Por favor, informe seu telefone (com DDD) e e-mail para contato.",
                    "validation": {
                        "required": True,
                        "min_length": 10,
                        "type": "contact_combined"
                    }
                },
                {
                    "id": 3,
                    "question": "Perfeito, {username}! Com qual √°rea do direito voc√™ precisa de ajuda? Penal ou Sa√∫de (a√ß√µes e liminares m√©dicas)?",
                    "field": "area_qualification",
                    "context": "area_qualification",
                    "error_message": "Por favor, especifique a √°rea do direito que precisa de ajuda.",
                    "validation": {
                        "required": True,
                        "min_length": 3
                    }
                },
                {
                    "id": 4,
                    "question": "Perfeito, {username}! Com qual √°rea do direito voc√™ precisa de ajuda? Penal ou Sa√∫de (a√ß√µes e liminares m√©dicas)? Vim do firestone",
                    "field": "problem_description",
                    "context": "problem_gathering",
                    "error_message": "Por favor, descreva sua situa√ß√£o com mais detalhes.",
                    "validation": {
                        "required": True,
                        "min_length": 10
                    }
                }
            ]
        }

    async def _complete_flow_and_collect_phone(
        self,
        session_id: str,
        session_data: Dict[str, Any],
        flow: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Completar fluxo e iniciar coleta de telefone.
        """
        try:
            lead_data_raw = session_data.get("lead_data", {})
            
            # Marcar fluxo como completo
            session_data["flow_completed"] = True
            session_data["collecting_phone"] = True
            
            # Preparar dados do lead
            lead_data = {
                "name": lead_data_raw.get("identification", "N√£o informado"),
                "contact_info": lead_data_raw.get("contact_info", "N√£o informado"),
                "area_of_law": lead_data_raw.get("area_qualification", "N√£o informado"),
                "situation": lead_data_raw.get("problem_description", "N√£o informado"),
                "session_id": session_id,
                "platform": session_data.get("platform", "web"),
                "completed_at": datetime.now(),
                "status": "intake_completed"
            }
            
            # Salvar dados do lead
            try:
                lead_id = await save_lead_data(lead_data)
                session_data["lead_id"] = lead_id
                logger.info(f"‚úÖ Lead data saved with ID: {lead_id}")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è Erro ao salvar lead data: {str(e)}")
                session_data["lead_id"] = f"temp_{session_id}"
            
            await self._persist_session_safely(session_id, session_data)
            
            # Personalizar mensagem com nome do usu√°rio
            user_name = lead_data.get("name", "")
            if user_name and user_name != "N√£o informado":
                phone_message = f"Perfeito, {user_name}! Suas informa√ß√µes foram registradas. Para finalizar, me informe seu n√∫mero de WhatsApp com DDD (ex: 11999999999):"
            else:
                phone_message = "Perfeito! Suas informa√ß√µes foram registradas. Para finalizar, me informe seu n√∫mero de WhatsApp com DDD (ex: 11999999999):"
            
            return {
                "response": phone_message,
                "response_type": "phone_collection",
                "session_id": session_id,
                "flow_completed": True,
                "collecting_phone": True,
                "lead_id": session_data.get("lead_id"),
                "ai_mode": False
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao completar fluxo: {str(e)}")
            return {
                "response": "Para finalizar, me informe seu n√∫mero de WhatsApp:",
                "response_type": "phone_collection_fallback",
                "session_id": session_id,
                "flow_completed": True,
                "collecting_phone": True,
                "ai_mode": False
            }

    async def _handle_phone_collection(
        self,
        message: str,
        session_id: str,
        session_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Lidar com coleta de n√∫mero de telefone.
        """
        try:
            phone_clean = re.sub(r'[^\d]', '', message)
            
            # Validar n√∫mero
            if len(phone_clean) < 10 or len(phone_clean) > 11:
                return {
                    "response": "N√∫mero inv√°lido. Por favor, digite seu WhatsApp com DDD (ex: 11999999999):",
                    "response_type": "phone_validation_error",
                    "session_id": session_id,
                    "collecting_phone": True,
                    "flow_completed": True,
                    "ai_mode": False
                }
            
            # Formatar n√∫mero
            if len(phone_clean) == 10:
                phone_formatted = f"55{phone_clean[:2]}9{phone_clean[2:]}"
            else:
                phone_formatted = f"55{phone_clean}"
            
            # Atualizar sess√£o
            session_data["phone_collected"] = True
            session_data["collecting_phone"] = False
            session_data["ai_mode"] = True
            session_data["phone_number"] = phone_clean
            session_data["phone_formatted"] = phone_formatted
            
            await self._persist_session_safely(session_id, session_data)
            
            # Enviar confirma√ß√µes
            try:
                await self._send_whatsapp_confirmation_and_notify(session_data, phone_formatted)
            except Exception as e:
                logger.error(f"‚ö†Ô∏è Erro ao enviar confirma√ß√£o WhatsApp: {str(e)}")
            
            # Personalizar confirma√ß√£o com nome do usu√°rio
            user_name = session_data.get("lead_data", {}).get("identification", "")
            if user_name and user_name != "N√£o informado":
                confirmation_message = f"‚úÖ N√∫mero confirmado: {phone_clean}\n\n{user_name}, suas informa√ß√µes foram registradas com sucesso! Nossa equipe entrar√° em contato em breve."
            else:
                confirmation_message = f"‚úÖ N√∫mero confirmado: {phone_clean}\n\nSuas informa√ß√µes foram registradas com sucesso! Nossa equipe entrar√° em contato em breve."
            
            return {
                "response": confirmation_message,
                "response_type": "phone_collected",
                "session_id": session_id,
                "flow_completed": True,
                "phone_collected": True,
                "collecting_phone": False,
                "ai_mode": True,
                "phone_number": phone_clean
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na coleta de telefone: {str(e)}")
            return {
                "response": "Erro ao processar seu n√∫mero. Vamos continuar! Como posso ajud√°-lo?",
                "response_type": "phone_error_fallback",
                "session_id": session_id,
                "flow_completed": True,
                "ai_mode": True,
                "phone_collected": False
            }

    async def _send_whatsapp_confirmation_and_notify(
        self,
        session_data: Dict[str, Any],
        phone_formatted: str
    ):
        """
        Enviar confirma√ß√£o WhatsApp e notificar advogados.
        """
        try:
            lead_data = session_data.get("lead_data", {})
            user_name = lead_data.get("identification", "Cliente")
            area_of_law = lead_data.get("area_qualification", "N√£o informado")
            situation = lead_data.get("problem_description", "N√£o informado")
            
            user_message = f"""Ol√° {user_name}! üëã

Recebemos suas informa√ß√µes e nossa equipe jur√≠dica especializada vai entrar em contato em breve.

üìã Resumo do seu caso:
‚Ä¢ √Årea: {area_of_law}
‚Ä¢ Situa√ß√£o: {situation[:100]}{'...' if len(situation) > 100 else ''}

Obrigado por escolher nossos servi√ßos! ü§ù"""

            try:
                await baileys_service.send_whatsapp_message(
                    f"{phone_formatted}@s.whatsapp.net",
                    user_message
                )
                logger.info(f"‚úÖ Confirma√ß√£o enviada para: {phone_formatted}")
            except Exception as e:
                logger.error(f"‚ùå Erro ao enviar confirma√ß√£o: {str(e)}")
            
            # Notificar advogados
            try:
                await lawyer_notification_service.notify_lawyers_of_new_lead(
                    lead_name=user_name,
                    lead_phone=session_data.get("phone_number", ""),
                    category=area_of_law,
                    additional_info={
                        "situation": situation,
                        "platform": session_data.get("platform", "web"),
                        "session_id": session_data.get("session_id")
                    }
                )
                logger.info(f"‚úÖ Advogados notificados para: {user_name}")
            except Exception as e:
                logger.error(f"‚ùå Erro ao notificar advogados: {str(e)}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro na confirma√ß√£o WhatsApp: {str(e)}")

    async def _handle_ai_conversation(
        self,
        message: str,
        session_id: str,
        session_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Lidar com conversa AI ap√≥s completar o fluxo.
        """
        try:
            # Tentar Gemini AI primeiro
            if not self._is_gemini_unavailable():
                try:
                    context = {
                        "name": session_data.get("lead_data", {}).get("identification"),
                        "contact_info": session_data.get("lead_data", {}).get("contact_info"),
                        "area_of_law": session_data.get("lead_data", {}).get("area_qualification"),
                        "situation": session_data.get("lead_data", {}).get("problem_description"),
                        "platform": session_data.get("platform", "web")
                    }
                    
                    ai_response = await ai_orchestrator.generate_response(
                        message, session_id, context
                    )
                    
                    await self._persist_session_safely(session_id, session_data)
                    
                    return {
                        "response": ai_response,
                        "response_type": "ai_intelligent",
                        "session_id": session_id,
                        "flow_completed": True,
                        "phone_collected": True,
                        "ai_mode": True,
                        "gemini_available": True
                    }
                    
                except Exception as e:
                    if self._is_quota_error(str(e)):
                        self._mark_gemini_unavailable()
                        logger.warning("üö´ Gemini quota exceeded, using fallback")
                    else:
                        logger.error(f"‚ùå Gemini error: {str(e)}")
            
            # Fallback personalizado
            user_name = session_data.get("lead_data", {}).get("identification", "")
            area_of_law = session_data.get("lead_data", {}).get("area_qualification", "")
            
            if user_name and user_name != "N√£o informado":
                if area_of_law and area_of_law != "N√£o informado":
                    fallback_response = f"Obrigado pela sua mensagem, {user_name}! Entendi que voc√™ precisa de ajuda com {area_of_law}. Nossa equipe especializada j√° tem suas informa√ß√µes e entrar√° em contato em breve para dar continuidade ao seu caso."
                else:
                    fallback_response = f"Obrigado pela sua mensagem, {user_name}! Nossa equipe j√° tem suas informa√ß√µes e entrar√° em contato em breve para dar continuidade ao seu caso."
            else:
                fallback_response = "Obrigado pela sua mensagem! Nossa equipe j√° tem suas informa√ß√µes e entrar√° em contato em breve para dar continuidade ao seu caso."
            
            return {
                "response": fallback_response,
                "response_type": "ai_fallback",
                "session_id": session_id,
                "flow_completed": True,
                "phone_collected": True,
                "ai_mode": True,
                "gemini_available": False
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na conversa AI: {str(e)}")
            return {
                "response": "Como posso ajud√°-lo?",
                "response_type": "ai_error_fallback",
                "session_id": session_id,
                "ai_mode": True
            }

    def _validate_answer(self, answer: str, step: int, step_data: Dict[str, Any] = None) -> bool:
        """
        Validar respostas do usu√°rio baseado no step.
        """
        logger.info(f"üîç Validando resposta para step {step}: '{answer}' (length: {len(answer.strip())})")
        
        if not answer or len(answer.strip()) < 1:
            logger.warning(f"‚ùå Resposta vazia para step {step}")
            return False
        
        # Se for mensagem de inicializa√ß√£o, n√£o √© resposta v√°lida
        if self._is_initialization_message(answer, step):
            logger.warning(f"‚ùå Mensagem de inicializa√ß√£o n√£o √© resposta v√°lida para step {step}")
            return False
        
        # Usar valida√ß√£o do Firebase se dispon√≠vel
        if step_data and "validation" in step_data:
            validation = step_data["validation"]
            
            if validation.get("required", True) and len(answer.strip()) == 0:
                logger.warning(f"‚ùå Campo obrigat√≥rio vazio para step {step}")
                return False
            
            min_length = validation.get("min_length", 2)
            if len(answer.strip()) < min_length:
                logger.warning(f"‚ùå Resposta muito curta para step {step} (m√≠n: {min_length})")
                return False
            
            validation_type = validation.get("type")
            if validation_type == "contact_combined":
                has_phone = bool(re.search(r'\d{8,}', answer))
                has_email = bool(re.search(r'\S+@\S+\.\S+', answer))
                if not (has_phone or has_email):
                    logger.warning(f"‚ùå Contato inv√°lido para step {step}")
                    return False
        
        # Valida√ß√£o padr√£o
        try:
            if step == 1:  # Nome
                answer_clean = answer.strip()
                if (answer_clean.isdigit() or 
                    len(answer_clean) < 2 or 
                    answer_clean.lower() in ["oi", "ol√°", "hello", "hi"]):
                    return False
                return True
            elif step == 2:  # Contato
                has_phone = bool(re.search(r'\d{8,}', answer))
                has_email = bool(re.search(r'\S+@\S+\.\S+', answer))
                return has_phone or has_email
            elif step == 3:  # √Årea
                return len(answer.strip()) >= 3
            elif step == 4:  # Situa√ß√£o
                return len(answer.strip()) >= 10
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o: {str(e)}")
            return True
        
        return True

    def _is_phone_number(self, text: str) -> bool:
        """Verificar se texto parece n√∫mero de telefone."""
        phone_clean = re.sub(r'[^\d]', '', text)
        return 10 <= len(phone_clean) <= 13

    def _is_quota_error(self, error_message: str) -> bool:
        """Verificar se erro √© relacionado a quota/limite de API."""
        error_lower = error_message.lower()
        quota_indicators = [
            "429", "quota", "rate limit", "resourceexhausted", 
            "billing", "exceeded", "too many requests"
        ]
        return any(indicator in error_lower for indicator in quota_indicators)

    def _mark_gemini_unavailable(self):
        """Marcar Gemini como temporariamente indispon√≠vel."""
        self.gemini_unavailable_until = datetime.now() + self.gemini_check_interval
        logger.warning(f"üö´ Gemini marcado indispon√≠vel at√© {self.gemini_unavailable_until}")

    def _is_gemini_unavailable(self) -> bool:
        """Verificar se Gemini est√° marcado como indispon√≠vel."""
        if self.gemini_unavailable_until is None:
            return False
        
        if datetime.now() > self.gemini_unavailable_until:
            self.gemini_unavailable_until = None
            logger.info("‚úÖ Disponibilidade do Gemini restaurada")
            return False
        
        return True

    # M√©todos adicionais para compatibilidade
    async def handle_whatsapp_authorization(self, auth_data: Dict[str, Any]):
        """Lidar com autoriza√ß√£o WhatsApp."""
        try:
            session_id = auth_data.get("session_id")
            phone_number = auth_data.get("phone_number")
            
            session_data = {
                "session_id": session_id,
                "platform": "whatsapp",
                "current_step": 1,
                "flow_completed": False,
                "collecting_phone": False,
                "phone_collected": False,
                "ai_mode": False,
                "lead_data": {},
                "message_count": 0,
                "phone_number": phone_number,
                "created_at": datetime.now(),
                "last_updated": datetime.now(),
                "flow_source": "firebase"
            }
            
            await self._persist_session_safely(session_id, session_data)
            
            # Enviar mensagem inicial
            flow = await self._get_flow_with_cache()
            initial_step = next((s for s in flow["steps"] if s["id"] == 1), None)
            if initial_step:
                welcome_message = f"üëã Ol√°! Bem-vindo ao nosso escrit√≥rio de advocacia.\n\n{initial_step['question']}"
            else:
                welcome_message = "üëã Ol√°! Qual √© o seu nome completo?"
            
            try:
                await baileys_service.send_whatsapp_message(
                    f"{phone_number}@s.whatsapp.net",
                    welcome_message
                )
            except Exception as e:
                logger.error(f"‚ùå Erro ao enviar mensagem inicial: {str(e)}")
            
            return {"success": True, "session_id": session_id}
            
        except Exception as e:
            logger.error(f"‚ùå Erro na autoriza√ß√£o WhatsApp: {str(e)}")
            return {"success": False, "error": str(e)}

    async def handle_phone_number_submission(self, phone_number: str, session_id: str, user_name: str = "Cliente") -> Dict[str, Any]:
        """Lidar com submiss√£o de n√∫mero de telefone."""
        try:
            session_data = await get_user_session(session_id)
            if not session_data:
                return {"success": False, "error": "Session not found"}
            
            phone_clean = re.sub(r'[^\d]', '', phone_number)
            
            if len(phone_clean) < 10 or len(phone_clean) > 11:
                return {"success": False, "error": "Invalid phone number format"}
            
            if len(phone_clean) == 10:
                phone_formatted = f"55{phone_clean[:2]}9{phone_clean[2:]}"
            else:
                phone_formatted = f"55{phone_clean}"
            
            session_data["phone_collected"] = True
            session_data["phone_number"] = phone_clean
            session_data["phone_formatted"] = phone_formatted
            session_data["ai_mode"] = True
            session_data["collecting_phone"] = False
            
            await self._persist_session_safely(session_id, session_data)
            
            try:
                await self._send_whatsapp_confirmation_and_notify(session_data, phone_formatted)
            except Exception as e:
                logger.error(f"‚ö†Ô∏è Erro ao enviar confirma√ß√µes: {str(e)}")
            
            return {"success": True, "phone_number": phone_clean}
            
        except Exception as e:
            logger.error(f"‚ùå Erro na submiss√£o de telefone: {str(e)}")
            return {"success": False, "error": str(e)}

    async def get_session_context(self, session_id: str) -> Dict[str, Any]:
        """Obter contexto da sess√£o."""
        try:
            session_data = await get_user_session(session_id)
            if not session_data:
                return {"exists": False}
            
            return {
                "exists": True,
                "session_data": session_data,
                "current_step": session_data.get("current_step"),
                "flow_completed": session_data.get("flow_completed", False),
                "phone_collected": session_data.get("phone_collected", False),
                "ai_mode": session_data.get("ai_mode", False),
                "collecting_phone": session_data.get("collecting_phone", False),
                "platform": session_data.get("platform", "unknown"),
                "lead_data": session_data.get("lead_data", {}),
                "message_count": session_data.get("message_count", 0),
                "flow_source": session_data.get("flow_source", "unknown")
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter contexto da sess√£o: {str(e)}")
            return {"exists": False, "error": str(e)}

    async def reset_session(self, session_id: str) -> Dict[str, Any]:
        """Resetar sess√£o para testes."""
        try:
            fresh_session = {
                "session_id": session_id,
                "platform": "web",
                "current_step": 1,
                "flow_completed": False,
                "collecting_phone": False,
                "phone_collected": False,
                "ai_mode": False,
                "lead_data": {},
                "message_count": 0,
                "created_at": datetime.now(),
                "last_updated": datetime.now(),
                "reset_at": datetime.now(),
                "flow_source": "firebase"
            }
            
            await self._persist_session_safely(session_id, fresh_session)
            logger.info(f"‚úÖ Sess√£o resetada: {session_id}")
            
            return {"success": True, "message": "Session reset successfully"}
        except Exception as e:
            logger.error(f"‚ùå Erro ao resetar sess√£o: {str(e)}")
            return {"success": False, "error": str(e)}


# Inst√¢ncia global do orchestrador
intelligent_orchestrator = IntelligentHybridOrchestrator()